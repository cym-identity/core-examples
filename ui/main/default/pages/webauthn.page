<apex:page showHeader="false" controller="WebAuthnController" applyBodyTag="false" applyHtmlTag="false" action="{!init}">
    <html>
    <head></head>
    <body>
      <script type="text/javascript">
        (function () {
          if (!window.PublicKeyCredential) return sendMessage('ready', {
            error: 'invalid_browser',
            error_description: 'WebAuthn not supported on this browser'
          });
          const input = JSON.parse("{! JSENCODE(log) }");
          console.log(input);
          var base64url = (function () {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
            // Use a lookup table to find the index.
            var lookup = new Uint8Array(256);
            for (var i = 0; i < chars.length; i++) lookup[chars.charCodeAt(i)] = i;

            return {
              decode: function (base64string) {
                var bufferLength = base64string.length * 0.75,
                  len = base64string.length,i,p = 0,encoded1,encoded2,encoded3,encoded4;
                var bytes = new Uint8Array(bufferLength);
                for (i = 0; i < len; i += 4) {
                  encoded1 = lookup[base64string.charCodeAt(i)];
                  encoded2 = lookup[base64string.charCodeAt(i + 1)];
                  encoded3 = lookup[base64string.charCodeAt(i + 2)];
                  encoded4 = lookup[base64string.charCodeAt(i + 3)];
                  bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
                  bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
                  bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
                }
                return bytes.buffer;
              },
              encode: function (arraybuffer) {
                var bytes = new Uint8Array(arraybuffer),i,len = bytes.length,base64url = "";
                for (i = 0; i < len; i += 3) {
                  base64url += chars[bytes[i] >> 2];
                  base64url += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
                  base64url += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
                  base64url += chars[bytes[i + 2] & 63];
                }
                if (len % 3 === 2) {
                  base64url = base64url.substring(0, base64url.length - 1);
                } else if (len % 3 === 1) {
                  base64url = base64url.substring(0, base64url.length - 2);
                }
                return base64url;
              }
            };
          })()

          var remote = async function(action, payload) {
            return fetch( input.baseUrl + '/remote?action=' + encodeURIComponent(action), {
              method: 'POST',
              headers: {
                'Accept' : 'application/json'
              },
              body: new URLSearchParams({
                payload: JSON.stringify(payload || {})
              })
            })
            .then(resp => resp.json())
            .then((resp) => {
              const { error, response } = resp;
              if (error) return Promise.reject(error);
              return response;
            });
          }

          function preformatMakeCredReq(makeCredReq) {
            makeCredReq.challenge = base64url.decode(makeCredReq.challenge);
            if (makeCredReq.user)
              makeCredReq.user.id = base64url.decode(makeCredReq.user.id);
            if (
              makeCredReq.allowCredentials &&
              makeCredReq.allowCredentials.length > 0
            ) {
              makeCredReq.allowCredentials.forEach(function (cred) {
                cred.id = base64url.decode(cred.id);
              });
            }
            if (
              makeCredReq.excludeCredentials &&
              makeCredReq.excludeCredentials.length > 0
            ) {
              makeCredReq.excludeCredentials.forEach((cred) => {
                cred.id = base64url.decode(cred.id);
              });
            }
            return makeCredReq;
          }

          var allowedOrigin = window.location.protocol + '//' + window.location.host;
          function sendMessage(action, response) {
            window.parent.postMessage({ action: action, response: response, requestor: input.requestor }, allowedOrigin);
          }

          function initRegisterWebAuthn(data) {
            var userId = data.userId;
            var startUrl = data.startUrl;
            var payload = {'authenticator' : input.authenticator.name};
            if (userId) payload.userId = userId;

            return remote('WebAuthnController.' + data.action, payload)
              .then(function (response) {
                var publicKey = preformatMakeCredReq(response.publicKey);
                return navigator.credentials
                  .create({ publicKey: publicKey })
                  .then((response) => {
                    var payload = {
                      startURL: startUrl,
                      id: response.id,
                      rawId: base64url.encode(response.rawId),
                      attestationObject: base64url.encode(
                        response.response.attestationObject
                      ),
                      clientDataJSON: base64url.encode(
                        response.response.clientDataJSON
                      ),
                      transports: response.response.getTransports
                        ? JSON.stringify(response.response.getTransports())
                        : "[]",
                      authenticator: input.authenticator.name,
                    };
                    if (userId) payload.userId = userId;
                    return remote('WebAuthnController.VerifyRegisterWebAuthn', payload);;
                  });
              });
          }

          function initVerifyWebAuthn(data) {
            var userId = data.userId || null;
            var startUrl = data.startUrl;
            var payload = {'authenticator' : input.authenticator.name};
            if (userId) payload.userId = userId;

            return remote('WebAuthnController.' + data.action, payload)
              .then(function (response) {
                var publicKey = preformatMakeCredReq(response.publicKey);
                return navigator.credentials.get({ publicKey: publicKey })
                  .then(function (response) {
                    var payload = {
                      startURL: startUrl,
                      id: response.id,
                      rawId: base64url.encode(response.rawId),
                      authenticatorData: base64url.encode(
                        response.response.authenticatorData
                      ),
                      clientDataJSON: base64url.encode(
                        response.response.clientDataJSON
                      ),
                      signature: base64url.encode(response.response.signature),
                      authenticator: input.authenticator.name,
                    }
                    if (userId) payload.userId = userId;
                    return remote('WebAuthnController.VerifyVerifyWebAuthn', payload);;
                  })
              });
          }

          window.addEventListener("message", function (event) {
            if (event.origin !== allowedOrigin) return console.error('unknown origin');
            try {
              var data = event.data;
              if (data.action === 'initRegisterWebAuthn') {
                return initRegisterWebAuthn(data)
                  .then(function (response) {
                    sendMessage('initRegisterWebAuthn', response);
                  }).catch(function (error) {
                    sendMessage('initRegisterWebAuthn', { error: error.name, error_description: error.message });
                  });
              } else if (data.action === 'initVerifyWebAuthn') {
                return initVerifyWebAuthn(data)
                  .then(function (response) {
                    sendMessage('initVerifyWebAuthn', response);
                  }).catch(function (error) {
                    sendMessage('initVerifyWebAuthn', { error: error.name, error_description: error.message });
                  });
              } else {
                sendMessage(action, { error: 'invalid_action', error_description: 'The action ' + action + ' is unknown' });
              }
            } catch (e) { console.error(e) }
          }, false);

          if (!input.authenticator) return sendMessage('ready', { error: 'invalid_authenticator', error_description: 'The authenticator requested is unknown' });

          if (input.authenticator.type === 'platform' && input.authenticator.userVerification === 'required') {
            return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(function (isUserVerifyingPlatformAuthenticatorAvailable) {
              if (isUserVerifyingPlatformAuthenticatorAvailable) return sendMessage('ready', {});
              sendMessage('ready', {
                error: 'invalid_platform',
                error: 'The current platform does not support UserVerifying authenticators'
              });
            });
          }

          return sendMessage('ready', {});
        })()
      </script>
    </body>
    </html>
</apex:page>